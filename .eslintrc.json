{
	"root": true,
	"ignorePatterns": ["projects/**/*"],
	"overrides": [
		{
			"files": ["*.ts"],
			"env": {
				"browser": true,
				"es2021": true,
				"node": false
			},
			"parser": "@typescript-eslint/parser",
			"parserOptions": {
				"project": ["tsconfig.json"],
				"createDefaultProgram": true,
				"ecmaVersion": 12, // Allows for the parsing of modern ECMAScript features
				"sourceType": "module", // Allows for the use of imports
				"ecmaFeatures": {
					"jsx": true // permite a eslint analizar los archivos jsx o tsx
				}
			},
			"extends": [
				"plugin:@angular-eslint/recommended",
				"plugin:@angular-eslint/template/process-inline-templates"
			],
			"plugins": ["@typescript-eslint", "prefer-arrow"],
			"rules": {
				"@angular-eslint/directive-selector": [
					"error",
					{
						"type": "attribute",
						"prefix": "app",
						"style": "camelCase"
					}
				],
				"@angular-eslint/component-selector": [
					"error",
					{
						"type": "element",
						"prefix": "app",
						"style": "kebab-case"
					}
				],
				"@typescript-eslint/explicit-member-accessibility": [
					"off",
					{
						"accessibility": "explicit"
					}
				],
				// "arrow-parens": ["off", "always"],
				// "import/order": "off",
				"@typescript-eslint/adjacent-overload-signatures": "error",
				"@typescript-eslint/array-type": "off",
				"@typescript-eslint/ban-types": [
					"error",
					{
						"types": {
							"Object": {
								"message": "Avoid using the `Object` type. Did you mean `object`?"
							},
							"Function": {
								"message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
							},
							"Boolean": {
								"message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
							},
							"Number": {
								"message": "Avoid using the `Number` type. Did you mean `number`?"
							},
							"String": {
								"message": "Avoid using the `String` type. Did you mean `string`?"
							},
							"Symbol": {
								"message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
							}
						}
					}
				],
				"@typescript-eslint/consistent-type-assertions": "error",
				"@typescript-eslint/indent": [
					"error",
					2,
					{
						"FunctionDeclaration": {
							"parameters": "first"
						},
						"FunctionExpression": {
							"parameters": "first"
						}
					}
				],
				"@typescript-eslint/member-delimiter-style": [
					"error",
					{
						"multiline": {
							"delimiter": "semi",
							"requireLast": true
						},
						"singleline": {
							"delimiter": "semi",
							"requireLast": false
						}
					}
				],
				"@typescript-eslint/member-ordering": "error",
				"@typescript-eslint/no-empty-function": "off",
				"@typescript-eslint/no-empty-interface": "error",
				"@typescript-eslint/no-explicit-any": "off",
				// "@typescript-eslint/no-inferrable-types": "error",
				"@typescript-eslint/no-misused-new": "error",
				"@typescript-eslint/no-namespace": "error",
				"@typescript-eslint/no-non-null-assertion": "error",
				"@typescript-eslint/no-parameter-properties": "off",
				"@typescript-eslint/no-use-before-define": "off",
				"@typescript-eslint/no-var-requires": "off",
				"@typescript-eslint/prefer-for-of": "error",
				"@typescript-eslint/prefer-function-type": "error",
				"@typescript-eslint/prefer-namespace-keyword": "error",
				"@typescript-eslint/quotes": [
					"error",
					"single",
					{ "allowTemplateLiterals": true }
				],
				"@typescript-eslint/semi": ["error", "always"],
				"@typescript-eslint/triple-slash-reference": [
					"error",
					{
						"path": "always",
						"types": "prefer-import",
						"lib": "always"
					}
				],
				"@typescript-eslint/type-annotation-spacing": "error",
				"@typescript-eslint/unified-signatures": "error",
				"arrow-body-style": "error",
				"camelcase": "error",
				"complexity": "off",
				"constructor-super": "error",
				"curly": "error",
				"dot-notation": "error",
				"eol-last": "error",
				"eqeqeq": ["error", "smart"],
				"guard-for-in": "error",
				"id-blacklist": [
					"error",
					"any",
					"Number",
					"number",
					"String",
					"string",
					"Boolean",
					"boolean",
					"Undefined",
					"undefined"
				],
				"id-match": "error",
				"max-classes-per-file": "off",
				"max-len": [
					"error",
					{
						"code": 140
					}
				],
				"new-parens": "error",
				"no-bitwise": "error",
				"no-caller": "error",
				"no-cond-assign": "error",
				"no-console": [
					"error",
					{
						"allow": [
							"log",
							"warn",
							"dir",
							"timeLog",
							"assert",
							"clear",
							"count",
							"countReset",
							"group",
							"groupEnd",
							"table",
							"dirxml",
							"error",
							"groupCollapsed",
							"Console",
							"profile",
							"profileEnd",
							"timeStamp",
							"context"
						]
					}
				],
				"no-debugger": "error",
				"no-empty": "off",
				"no-eval": "error",
				"no-fallthrough": "error",
				"no-invalid-this": "off",
				"no-new-wrappers": "error",
				"no-restricted-imports": ["error", "rxjs/Rx"],
				"no-shadow": [
					"error",
					{
						"hoist": "all"
					}
				],
				"no-throw-literal": "error",
				"no-trailing-spaces": "error",
				"no-undef-init": "error",
				"no-underscore-dangle": "error",
				"no-unsafe-finally": "error",
				"no-unused-expressions": "error",
				"no-unused-labels": "error",
				"no-var": "error",
				"object-shorthand": "error",
				"one-var": ["error", "never"],
				"prefer-arrow/prefer-arrow-functions": [
					"warn",
					{
						"disallowPrototype": true,
						"singleReturnOnly": false,
						"classPropertiesAllowed": false
					}
				],
				"prefer-const": "error",
				"quote-props": ["error", "as-needed"],
				"radix": "error",
				"space-before-function-paren": [
					"error",
					{
						"anonymous": "never",
						"asyncArrow": "always",
						"named": "never"
					}
				],
				"spaced-comment": [
					"error",
					"always",
					{ "block": { "exceptions": ["*"] } }
				],
				"use-isnan": "error",
				"valid-typeof": "off"
			}
		},
		{
			"files": ["*.html"],
			"extends": ["plugin:@angular-eslint/template/recommended"],
			"rules": {}
		}
	]
}
